{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Concentration Read Latest Documentation - Browse GitHub Code Repository Stay focused on work when you want, and goof off when you don't. Concentration is a simple Python 3 console utility to block distracting sites when you need to focus, while allowing you to easily take timed breaks. Concentration uses the /etc/hosts file as the mechanism to block sites, and works on Linux, Macintosh, and Windows. Installing Concentration pip3 install concentration Or, if pip is already set to use Python 3 pip install concentration Or, if you wanted concentration installed and ran in an isolated environment, consider using pipx : pipx run concentration Using Concentration To keep focused (blocking distracting sites): sudo concentration improve To take a small 5 minute timed break: sudo concentration break To take a long 60 minute timed break: sudo concentration break - m 60 You can cancel breaks with Ctrl-C . To disable blocking until you explicitly enable it again: sudo concentration lose Configuring Concentration You can add more files to the blocked list by putting them in the following files (new line delimited): - ~/.concentration.distractors - /etc/concentration.distractors You can make sure sites are visible even if concentration is enabled by putting them in the following files (new line delimited): - ~/.concentration.safe - /etc/concentration.safe Articles featuring Concentration https://www.turtle-techies.com/useful-linux-unix-tools-to-add-to-your-toolbox/#peace-and-concentration https://opensource.com/article/20/8/python-concentration Thanks and I hope you find concentration useful in your effort to get more done! ~Timothy Crosley","title":"Home"},{"location":"#concentration","text":"Read Latest Documentation - Browse GitHub Code Repository Stay focused on work when you want, and goof off when you don't. Concentration is a simple Python 3 console utility to block distracting sites when you need to focus, while allowing you to easily take timed breaks. Concentration uses the /etc/hosts file as the mechanism to block sites, and works on Linux, Macintosh, and Windows.","title":"Concentration"},{"location":"#installing-concentration","text":"pip3 install concentration Or, if pip is already set to use Python 3 pip install concentration Or, if you wanted concentration installed and ran in an isolated environment, consider using pipx : pipx run concentration","title":"Installing Concentration"},{"location":"#using-concentration","text":"To keep focused (blocking distracting sites): sudo concentration improve To take a small 5 minute timed break: sudo concentration break To take a long 60 minute timed break: sudo concentration break - m 60 You can cancel breaks with Ctrl-C . To disable blocking until you explicitly enable it again: sudo concentration lose","title":"Using Concentration"},{"location":"#configuring-concentration","text":"You can add more files to the blocked list by putting them in the following files (new line delimited): - ~/.concentration.distractors - /etc/concentration.distractors You can make sure sites are visible even if concentration is enabled by putting them in the following files (new line delimited): - ~/.concentration.safe - /etc/concentration.safe","title":"Configuring Concentration"},{"location":"#articles-featuring-concentration","text":"https://www.turtle-techies.com/useful-linux-unix-tools-to-add-to-your-toolbox/#peace-and-concentration https://opensource.com/article/20/8/python-concentration Thanks and I hope you find concentration useful in your effort to get more done! ~Timothy Crosley","title":"Articles featuring Concentration"},{"location":"docs/contributing/1.-contributing-guide/","text":"Contributing to concentration Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place. Getting concentration set up for local development The first step when contributing to any project is getting it set up on your local machine. concentration aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.6+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/concentration.git `cd concentration poetry install Making a contribution Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main concentration project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :). Thank you! I can not tell you how thankful I am for the hard work done by concentration contributors like you . Thank you! ~Timothy Crosley","title":"1. Contributing Guide"},{"location":"docs/contributing/1.-contributing-guide/#contributing-to-concentration","text":"Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place.","title":"Contributing to concentration"},{"location":"docs/contributing/1.-contributing-guide/#getting-concentration-set-up-for-local-development","text":"The first step when contributing to any project is getting it set up on your local machine. concentration aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.6+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/concentration.git `cd concentration poetry install","title":"Getting concentration set up for local development"},{"location":"docs/contributing/1.-contributing-guide/#making-a-contribution","text":"Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main concentration project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :).","title":"Making a contribution"},{"location":"docs/contributing/1.-contributing-guide/#thank-you","text":"I can not tell you how thankful I am for the hard work done by concentration contributors like you . Thank you! ~Timothy Crosley","title":"Thank you!"},{"location":"docs/contributing/2.-coding-standard/","text":"HOPE 8 -- Style Guide for Hug Code HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019 Introduction This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference. PEP 8 Foundation All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines. Line Length Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters. Descriptive Variable names Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand. Adding new modules New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible. Automated Code Cleaners All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place. Automated Code Linting All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"2. Coding Standard"},{"location":"docs/contributing/2.-coding-standard/#hope-8-style-guide-for-hug-code","text":"HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019","title":"HOPE 8 -- Style Guide for Hug Code"},{"location":"docs/contributing/2.-coding-standard/#introduction","text":"This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference.","title":"Introduction"},{"location":"docs/contributing/2.-coding-standard/#pep-8-foundation","text":"All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines.","title":"PEP 8 Foundation"},{"location":"docs/contributing/2.-coding-standard/#line-length","text":"Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters.","title":"Line Length"},{"location":"docs/contributing/2.-coding-standard/#descriptive-variable-names","text":"Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand.","title":"Descriptive Variable names"},{"location":"docs/contributing/2.-coding-standard/#adding-new-modules","text":"New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.","title":"Adding new modules"},{"location":"docs/contributing/2.-coding-standard/#automated-code-cleaners","text":"All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place.","title":"Automated Code Cleaners"},{"location":"docs/contributing/2.-coding-standard/#automated-code-linting","text":"All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"Automated Code Linting"},{"location":"docs/contributing/3.-code-of-conduct/","text":"HOPE 11 -- Code of Conduct HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019 Abstract Defines the Code of Conduct for Hug and all related projects. Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"3. Code Of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#hope-11-code-of-conduct","text":"HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019","title":"HOPE 11 -- Code of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#abstract","text":"Defines the Code of Conduct for Hug and all related projects.","title":"Abstract"},{"location":"docs/contributing/3.-code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"docs/contributing/3.-code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"docs/contributing/3.-code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"docs/contributing/3.-code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"docs/contributing/3.-code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"docs/contributing/3.-code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"docs/contributing/4.-acknowledgements/","text":"Contributors Core Developers Timothy Crosley (@timothycrosley) Notable Bug Reporters - Code Contributors Richard Killam (@rkillam) Sietse Brouwer (https://bitbucket.org/sietsebb) Documenters - A sincere thanks to everyone who helps make concentration into a great Python3 project! ~Timothy Crosley","title":"4. Acknowledgements"},{"location":"docs/contributing/4.-acknowledgements/#contributors","text":"","title":"Contributors"},{"location":"docs/contributing/4.-acknowledgements/#core-developers","text":"Timothy Crosley (@timothycrosley)","title":"Core Developers"},{"location":"docs/contributing/4.-acknowledgements/#notable-bug-reporters","text":"-","title":"Notable Bug Reporters"},{"location":"docs/contributing/4.-acknowledgements/#code-contributors","text":"Richard Killam (@rkillam) Sietse Brouwer (https://bitbucket.org/sietsebb)","title":"Code Contributors"},{"location":"docs/contributing/4.-acknowledgements/#documenters","text":"- A sincere thanks to everyone who helps make concentration into a great Python3 project! ~Timothy Crosley","title":"Documenters"},{"location":"reference/concentration/","text":"Module concentration concentration/ init .py A tool to make it easy to block sites that cause distraction View Source \"\"\"concentration/__init__.py A tool to make it easy to block sites that cause distraction \"\"\" __version__ = \"1.1.5\" Sub-modules concentration.output concentration.run concentration.settings","title":"Index"},{"location":"reference/concentration/#module-concentration","text":"concentration/ init .py A tool to make it easy to block sites that cause distraction View Source \"\"\"concentration/__init__.py A tool to make it easy to block sites that cause distraction \"\"\" __version__ = \"1.1.5\"","title":"Module concentration"},{"location":"reference/concentration/#sub-modules","text":"concentration.output concentration.run concentration.settings","title":"Sub-modules"},{"location":"reference/concentration/output/","text":"Module concentration.output concentration/settings.py Helpers for formatting CLI output. View Source \"\"\"concentration/settings.py Helpers for formatting CLI output. \"\"\" import shutil def banner ( txt ): width , _ = shutil . get_terminal_size () return txt . center ( width , \"#\" ) Functions banner def banner ( txt ) View Source def banner ( txt ) : width , _ = shutil . get_terminal_size () return txt . center ( width , \" # \" )","title":"Output"},{"location":"reference/concentration/output/#module-concentrationoutput","text":"concentration/settings.py Helpers for formatting CLI output. View Source \"\"\"concentration/settings.py Helpers for formatting CLI output. \"\"\" import shutil def banner ( txt ): width , _ = shutil . get_terminal_size () return txt . center ( width , \"#\" )","title":"Module concentration.output"},{"location":"reference/concentration/output/#functions","text":"","title":"Functions"},{"location":"reference/concentration/output/#banner","text":"def banner ( txt ) View Source def banner ( txt ) : width , _ = shutil . get_terminal_size () return txt . center ( width , \" # \" )","title":"banner"},{"location":"reference/concentration/run/","text":"Module concentration.run Concentration A very simple command line application to maintain focus by blocking distracting sites. View Sourceusr/bin/env python \"\"\"Concentration A very simple command line application to maintain focus by blocking distracting sites. \"\"\" import codecs import subprocess # nosec import sys import time import hug from . import output , settings def reset_network ( message ): \"\"\"Resets the users network to make changes take effect\"\"\" for command in settings . RESTART_NETWORK : try : subprocess . check_call ( command ) # nosec except Exception : # nosec pass print ( message ) @hug . cli () def improve (): \"\"\"Disables access to websites that are defined as 'distractors'\"\"\" with open ( settings . HOSTS_FILE , \"r+\" ) as hosts_file : contents = hosts_file . read () if settings . START_TOKEN not in contents and settings . END_TOKEN not in contents : hosts_file . write ( settings . START_TOKEN + \" \\n \" ) for site in set ( settings . DISTRACTORS ): hosts_file . write ( \" {0} \\t {1} \\n \" . format ( settings . REDIRECT_TO , site )) for sub_domain in settings . SUB_DOMAINS : hosts_file . write ( \" {0} \\t {1} . {2} \\n \" . format ( settings . REDIRECT_TO , sub_domain , site ) ) hosts_file . write ( settings . END_TOKEN + \" \\n \" ) reset_network ( \"Concentration is now improved :D!\" ) @hug . cli () def lose (): \"\"\"Enables access to websites that are defined as 'distractors'\"\"\" changed = False with open ( settings . HOSTS_FILE , \"r\" ) as hosts_file : new_file = [] in_block = False for line in hosts_file : if in_block : if line . strip () == settings . END_TOKEN : in_block = False changed = True elif line . strip () == settings . START_TOKEN : in_block = True else : new_file . append ( line ) if changed : with open ( settings . HOSTS_FILE , \"w\" ) as hosts_file : hosts_file . write ( \"\" . join ( new_file )) reset_network ( \"Concentration is now lost :(.\" ) @hug . cli ( \"break\" ) def take_break ( minutes : hug . types . number = 5 , now : bool = False ): \"\"\"Enables temporarily breaking concentration\"\"\" if not now : print ( \"\" ) print ( output . banner ( \"ARE YOU SURE?\" )) try : for remaining in range ( 60 , - 1 , - 1 ): sys . stdout . write ( \" \\r \" ) sys . stdout . write ( \" {:2d} seconds to change your mind. \" . format ( remaining )) sys . stdout . write ( \"Won't you prefer programming? Or a book?\" ) sys . stdout . flush () time . sleep ( 1 ) except KeyboardInterrupt : print ( \"\" ) print ( \"\" ) print ( \":D :D :D \\n Good on you! <3\" ) return # The user insisted on breaking concentration. lose () print ( \"\" ) print ( output . banner ( \"TAKING A BREAK\" )) try : for remaining in range ( minutes * 60 , - 1 , - 1 ): sys . stdout . write ( \" \\r \" ) sys . stdout . write ( \" {:2d} seconds remaining without concentration.\" . format ( remaining )) sys . stdout . flush () time . sleep ( 1 ) except KeyboardInterrupt : pass finally : sys . stdout . write ( \" \\r Enough distraction! \\n \" ) print ( output . banner ( \"BREAK OVER :)\" )) print ( \"\" ) improve () @hug . cli () def blocked (): \"\"\"Returns the configured list of blocked sites\"\"\" return settings . DISTRACTORS @hug . cli ( \"64\" ) def game (): \"\"\"Basic game implementation\"\"\" print ( codecs . encode ( \"Sbe Nznaqn, gur ybir bs zl yvsr\" , \"rot_13\" )) Functions blocked def blocked ( ) Returns the configured list of blocked sites View Source @hug . cli () def blocked () : \"\"\"Returns the configured list of blocked sites\"\"\" return settings . DISTRACTORS game def game ( ) Basic game implementation View Source @hug . cli ( \"64\" ) def game () : \"\"\"Basic game implementation\"\"\" print ( codecs . encode ( \"Sbe Nznaqn, gur ybir bs zl yvsr\" , \"rot_13\" )) improve def improve ( ) Disables access to websites that are defined as 'distractors' View Source @hug . cli () def improve () : \"\"\"Disables access to websites that are defined as 'distractors'\"\"\" with open ( settings . HOSTS_FILE , \"r+\" ) as hosts_file : contents = hosts_file . read () if settings . START_TOKEN not in contents and settings . END_TOKEN not in contents : hosts_file . write ( settings . START_TOKEN + \"\\n\" ) for site in set ( settings . DISTRACTORS ) : hosts_file . write ( \"{0}\\t{1}\\n\" . format ( settings . REDIRECT_TO , site )) for sub_domain in settings . SUB_DOMAINS : hosts_file . write ( \"{0}\\t{1}.{2}\\n\" . format ( settings . REDIRECT_TO , sub_domain , site ) ) hosts_file . write ( settings . END_TOKEN + \"\\n\" ) reset_network ( \"Concentration is now improved :D!\" ) lose def lose ( ) Enables access to websites that are defined as 'distractors' View Source @hug . cli () def lose () : \"\"\"Enables access to websites that are defined as 'distractors'\"\"\" changed = False with open ( settings . HOSTS_FILE , \"r\" ) as hosts_file : new_file = [] in_block = False for line in hosts_file : if in_block : if line . strip () == settings . END_TOKEN : in_block = False changed = True elif line . strip () == settings . START_TOKEN : in_block = True else : new_file . append ( line ) if changed : with open ( settings . HOSTS_FILE , \"w\" ) as hosts_file : hosts_file . write ( \"\" . join ( new_file )) reset_network ( \"Concentration is now lost :(.\" ) reset_network def reset_network ( message ) Resets the users network to make changes take effect View Source def reset_network ( message ) : \"\"\" Resets the users network to make changes take effect \"\"\" for command in settings . RESTART_NETWORK : try : subprocess . check_call ( command ) # nosec except Exception : # nosec pass print ( message ) take_break def take_break ( minutes : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7f56c879b730 > = 5 , now : bool = False ) Enables temporarily breaking concentration View Source @hug . cli ( \"break\" ) def take_break ( minutes : hug . types . number = 5 , now : bool = False ) : \"\"\"Enables temporarily breaking concentration\"\"\" if not now : print ( \"\" ) print ( output . banner ( \"ARE YOU SURE?\" )) try : for remaining in range ( 60 , - 1 , - 1 ) : sys . stdout . write ( \"\\r\" ) sys . stdout . write ( \"{:2d} seconds to change your mind. \" . format ( remaining )) sys . stdout . write ( \"Won't you prefer programming? Or a book?\" ) sys . stdout . flush () time . sleep ( 1 ) except KeyboardInterrupt : print ( \"\" ) print ( \"\" ) print ( \":D :D :D\\nGood on you! <3\" ) return # The user insisted on breaking concentration . lose () print ( \"\" ) print ( output . banner ( \"TAKING A BREAK\" )) try : for remaining in range ( minutes * 60 , - 1 , - 1 ) : sys . stdout . write ( \"\\r\" ) sys . stdout . write ( \"{:2d} seconds remaining without concentration.\" . format ( remaining )) sys . stdout . flush () time . sleep ( 1 ) except KeyboardInterrupt : pass finally : sys . stdout . write ( \"\\rEnough distraction! \\n\" ) print ( output . banner ( \"BREAK OVER :)\" )) print ( \"\" ) improve ()","title":"Run"},{"location":"reference/concentration/run/#module-concentrationrun","text":"Concentration A very simple command line application to maintain focus by blocking distracting sites. View Sourceusr/bin/env python \"\"\"Concentration A very simple command line application to maintain focus by blocking distracting sites. \"\"\" import codecs import subprocess # nosec import sys import time import hug from . import output , settings def reset_network ( message ): \"\"\"Resets the users network to make changes take effect\"\"\" for command in settings . RESTART_NETWORK : try : subprocess . check_call ( command ) # nosec except Exception : # nosec pass print ( message ) @hug . cli () def improve (): \"\"\"Disables access to websites that are defined as 'distractors'\"\"\" with open ( settings . HOSTS_FILE , \"r+\" ) as hosts_file : contents = hosts_file . read () if settings . START_TOKEN not in contents and settings . END_TOKEN not in contents : hosts_file . write ( settings . START_TOKEN + \" \\n \" ) for site in set ( settings . DISTRACTORS ): hosts_file . write ( \" {0} \\t {1} \\n \" . format ( settings . REDIRECT_TO , site )) for sub_domain in settings . SUB_DOMAINS : hosts_file . write ( \" {0} \\t {1} . {2} \\n \" . format ( settings . REDIRECT_TO , sub_domain , site ) ) hosts_file . write ( settings . END_TOKEN + \" \\n \" ) reset_network ( \"Concentration is now improved :D!\" ) @hug . cli () def lose (): \"\"\"Enables access to websites that are defined as 'distractors'\"\"\" changed = False with open ( settings . HOSTS_FILE , \"r\" ) as hosts_file : new_file = [] in_block = False for line in hosts_file : if in_block : if line . strip () == settings . END_TOKEN : in_block = False changed = True elif line . strip () == settings . START_TOKEN : in_block = True else : new_file . append ( line ) if changed : with open ( settings . HOSTS_FILE , \"w\" ) as hosts_file : hosts_file . write ( \"\" . join ( new_file )) reset_network ( \"Concentration is now lost :(.\" ) @hug . cli ( \"break\" ) def take_break ( minutes : hug . types . number = 5 , now : bool = False ): \"\"\"Enables temporarily breaking concentration\"\"\" if not now : print ( \"\" ) print ( output . banner ( \"ARE YOU SURE?\" )) try : for remaining in range ( 60 , - 1 , - 1 ): sys . stdout . write ( \" \\r \" ) sys . stdout . write ( \" {:2d} seconds to change your mind. \" . format ( remaining )) sys . stdout . write ( \"Won't you prefer programming? Or a book?\" ) sys . stdout . flush () time . sleep ( 1 ) except KeyboardInterrupt : print ( \"\" ) print ( \"\" ) print ( \":D :D :D \\n Good on you! <3\" ) return # The user insisted on breaking concentration. lose () print ( \"\" ) print ( output . banner ( \"TAKING A BREAK\" )) try : for remaining in range ( minutes * 60 , - 1 , - 1 ): sys . stdout . write ( \" \\r \" ) sys . stdout . write ( \" {:2d} seconds remaining without concentration.\" . format ( remaining )) sys . stdout . flush () time . sleep ( 1 ) except KeyboardInterrupt : pass finally : sys . stdout . write ( \" \\r Enough distraction! \\n \" ) print ( output . banner ( \"BREAK OVER :)\" )) print ( \"\" ) improve () @hug . cli () def blocked (): \"\"\"Returns the configured list of blocked sites\"\"\" return settings . DISTRACTORS @hug . cli ( \"64\" ) def game (): \"\"\"Basic game implementation\"\"\" print ( codecs . encode ( \"Sbe Nznaqn, gur ybir bs zl yvsr\" , \"rot_13\" ))","title":"Module concentration.run"},{"location":"reference/concentration/run/#functions","text":"","title":"Functions"},{"location":"reference/concentration/run/#blocked","text":"def blocked ( ) Returns the configured list of blocked sites View Source @hug . cli () def blocked () : \"\"\"Returns the configured list of blocked sites\"\"\" return settings . DISTRACTORS","title":"blocked"},{"location":"reference/concentration/run/#game","text":"def game ( ) Basic game implementation View Source @hug . cli ( \"64\" ) def game () : \"\"\"Basic game implementation\"\"\" print ( codecs . encode ( \"Sbe Nznaqn, gur ybir bs zl yvsr\" , \"rot_13\" ))","title":"game"},{"location":"reference/concentration/run/#improve","text":"def improve ( ) Disables access to websites that are defined as 'distractors' View Source @hug . cli () def improve () : \"\"\"Disables access to websites that are defined as 'distractors'\"\"\" with open ( settings . HOSTS_FILE , \"r+\" ) as hosts_file : contents = hosts_file . read () if settings . START_TOKEN not in contents and settings . END_TOKEN not in contents : hosts_file . write ( settings . START_TOKEN + \"\\n\" ) for site in set ( settings . DISTRACTORS ) : hosts_file . write ( \"{0}\\t{1}\\n\" . format ( settings . REDIRECT_TO , site )) for sub_domain in settings . SUB_DOMAINS : hosts_file . write ( \"{0}\\t{1}.{2}\\n\" . format ( settings . REDIRECT_TO , sub_domain , site ) ) hosts_file . write ( settings . END_TOKEN + \"\\n\" ) reset_network ( \"Concentration is now improved :D!\" )","title":"improve"},{"location":"reference/concentration/run/#lose","text":"def lose ( ) Enables access to websites that are defined as 'distractors' View Source @hug . cli () def lose () : \"\"\"Enables access to websites that are defined as 'distractors'\"\"\" changed = False with open ( settings . HOSTS_FILE , \"r\" ) as hosts_file : new_file = [] in_block = False for line in hosts_file : if in_block : if line . strip () == settings . END_TOKEN : in_block = False changed = True elif line . strip () == settings . START_TOKEN : in_block = True else : new_file . append ( line ) if changed : with open ( settings . HOSTS_FILE , \"w\" ) as hosts_file : hosts_file . write ( \"\" . join ( new_file )) reset_network ( \"Concentration is now lost :(.\" )","title":"lose"},{"location":"reference/concentration/run/#reset_network","text":"def reset_network ( message ) Resets the users network to make changes take effect View Source def reset_network ( message ) : \"\"\" Resets the users network to make changes take effect \"\"\" for command in settings . RESTART_NETWORK : try : subprocess . check_call ( command ) # nosec except Exception : # nosec pass print ( message )","title":"reset_network"},{"location":"reference/concentration/run/#take_break","text":"def take_break ( minutes : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7f56c879b730 > = 5 , now : bool = False ) Enables temporarily breaking concentration View Source @hug . cli ( \"break\" ) def take_break ( minutes : hug . types . number = 5 , now : bool = False ) : \"\"\"Enables temporarily breaking concentration\"\"\" if not now : print ( \"\" ) print ( output . banner ( \"ARE YOU SURE?\" )) try : for remaining in range ( 60 , - 1 , - 1 ) : sys . stdout . write ( \"\\r\" ) sys . stdout . write ( \"{:2d} seconds to change your mind. \" . format ( remaining )) sys . stdout . write ( \"Won't you prefer programming? Or a book?\" ) sys . stdout . flush () time . sleep ( 1 ) except KeyboardInterrupt : print ( \"\" ) print ( \"\" ) print ( \":D :D :D\\nGood on you! <3\" ) return # The user insisted on breaking concentration . lose () print ( \"\" ) print ( output . banner ( \"TAKING A BREAK\" )) try : for remaining in range ( minutes * 60 , - 1 , - 1 ) : sys . stdout . write ( \"\\r\" ) sys . stdout . write ( \"{:2d} seconds remaining without concentration.\" . format ( remaining )) sys . stdout . flush () time . sleep ( 1 ) except KeyboardInterrupt : pass finally : sys . stdout . write ( \"\\rEnough distraction! \\n\" ) print ( output . banner ( \"BREAK OVER :)\" )) print ( \"\" ) improve ()","title":"take_break"},{"location":"reference/concentration/settings/","text":"Module concentration.settings concentration/settings.py Defines how the basic concentration settings get loaded. View Source \"\"\"concentration/settings.py Defines how the basic concentration settings get loaded. \"\"\" import os import sys from enum import Enum OS = Enum ( \"OS\" , \"linux mac windows\" ) HOSTS_FILE = \"/etc/hosts\" REDIRECT_TO = \"127.0.0.1\" START_TOKEN = \"## START DISTRACTORS ##\" # nosec - not password END_TOKEN = \"## END DISTRACTORS ##\" # nosec - not password SUB_DOMAINS = ( \"www\" , \"news\" ) DISTRACTORS = { \"ycombinator.com\" , \"slashdot.com\" , \"facebook.com\" , \"reddit.com\" , \"gawker.com\" , \"theverge.com\" , \"techcrunch.com\" , \"thenextweb.com\" , \"wired.com\" , \"gizmodo.com\" , \"slickdeals.net\" , \"mashable.com\" , \"digitaltrends.com\" , \"techradar.com\" , \"twitter.com\" , \"tumblr.com\" , \"technorati.com\" , \"digg.com\" , \"buzzfeed.com\" , \"twitter.com\" , \"youtube.com\" , \"netflix.com\" , \"iwastesomuchtime.com\" , \"pinterest.com\" , \"ebay.com\" , \"thepointsguy.com\" , \"imgur.com\" , \"woot.com\" , \"flyertalk.com\" , \"instagram.com\" , \"medium.com\" , \"meetup.com\" , \"distrowatch.com\" , \"arstechnica.com\" , \"phoronix.com\" , \"arstechnica.com\" , \"failblog.com\" , \"redfin.com\" , \"realtor.com\" , \"zillow.com\" , \"trulia.com\" , \"cnn.com\" , \"fox.com\" , \"realclearpolitics.com\" , \"yelp.com\" , \"opentable.com\" , \"slashdot.org\" , \"xkcd.com\" , \"cnet.com\" , \"tomshardware.com\" , \"engadget.com\" , \"zdnet.com\" , \"techrepublic.com\" , \"gizmag.com\" , \"anandtech.com\" , \"imore.com\" , \"gsmarena.com \" , \"geek.com\" , \"firstpost.com\" , \"wearables.com\" , \"stripgenerator.com\" , \"fmylife.com\" , \"liveplasma.com\" , \"cracked.com\" , \"befunky.com\" , \"pcworld.com\" , \"typepad.com\" , \"pogo.com\" , \"omegle.com\" , \"lifehacker.com\" , \"answerbag.com\" , \"cheezburger.com\" , \"fark.com\" , \"popurls.com\" , \"sho.com\" , \"hulu.com\" , \"myparentsjoinedfacebook.com\" , \"homestarrunner.com\" , \"petsinclothes.com\" , \"freerice.com\" , \"everypoet.com\" , \"mono-1.com\" , \"mcsweeneys.net\" , \"postsecret.com\" , \"textsfromlastnight.com\" , \"awkwardfamilyphotos.com\" , \"myspace.com\" , \"lunchtimers.com\" , \"twitterfall.com\" , \"break.com\" , \"passiveaggressivenotes.com\" , \"sciencemag.org\" , \"bbc.com\" , \"notalwaysright.com\" , } try : CONFIG_DIRS = { \"/etc\" , os . path . expanduser ( \"~\" ), os . path . expanduser ( f \"~ { os . getlogin () } \" )} except OSError : CONFIG_DIRS = { \"/etc\" , os . path . expanduser ( \"~\" )} for distractor_config in ( os . path . join ( config_dir , \"concentration.distractors\" ) for config_dir in CONFIG_DIRS ): if os . path . isfile ( distractor_config ): with open ( distractor_config ) as distractor_config_file : DISTRACTORS . update ( distractor_config_file . read () . splitlines ()) for safe_config in ( os . path . join ( config_dir , \"concentration.safe\" ) for config_dir in CONFIG_DIRS ): if os . path . isfile ( safe_config ): with open ( safe_config ) as safe_config_file : DISTRACTORS . difference_update ( safe_config_file . read () . splitlines () ) # Remove all white listed domains DISTRACTORS . discard ( \"\" ) PLATFORM = OS . linux for platform in (( \"linux\" , OS . linux ), ( \"darwin\" , OS . mac ), ( \"win32\" , OS . windows )): if platform [ 0 ] in sys . platform : PLATFORM = platform [ 1 ] RESTART_NETWORK = { OS . linux : [ [ \"/etc/init.d/networking\" , \"restart\" ], [ \"/etc/init.d/nscd\" , \"restart\" ], [ \"/etc/rc.d/nscd\" , \"restart\" ], [ \"/etc/rc.d/init.d/nscd\" , \"restart\" ], ], OS . mac : [[ \"dscacheutil\" , \"-flushcache\" ]], OS . windows : [[ \"ipconfig\" , \"/flushdns\" ]], }[ PLATFORM ] if PLATFORM is OS . windows : HOSTS_FILE = \"/Windows/System32/drivers/etc/hosts\" Variables CONFIG_DIRS DISTRACTORS END_TOKEN HOSTS_FILE PLATFORM REDIRECT_TO RESTART_NETWORK START_TOKEN SUB_DOMAINS distractor_config platform safe_config Classes OS class OS ( / , * args , ** kwargs ) Ancestors (in MRO) enum.Enum Class variables linux mac name value windows","title":"Settings"},{"location":"reference/concentration/settings/#module-concentrationsettings","text":"concentration/settings.py Defines how the basic concentration settings get loaded. View Source \"\"\"concentration/settings.py Defines how the basic concentration settings get loaded. \"\"\" import os import sys from enum import Enum OS = Enum ( \"OS\" , \"linux mac windows\" ) HOSTS_FILE = \"/etc/hosts\" REDIRECT_TO = \"127.0.0.1\" START_TOKEN = \"## START DISTRACTORS ##\" # nosec - not password END_TOKEN = \"## END DISTRACTORS ##\" # nosec - not password SUB_DOMAINS = ( \"www\" , \"news\" ) DISTRACTORS = { \"ycombinator.com\" , \"slashdot.com\" , \"facebook.com\" , \"reddit.com\" , \"gawker.com\" , \"theverge.com\" , \"techcrunch.com\" , \"thenextweb.com\" , \"wired.com\" , \"gizmodo.com\" , \"slickdeals.net\" , \"mashable.com\" , \"digitaltrends.com\" , \"techradar.com\" , \"twitter.com\" , \"tumblr.com\" , \"technorati.com\" , \"digg.com\" , \"buzzfeed.com\" , \"twitter.com\" , \"youtube.com\" , \"netflix.com\" , \"iwastesomuchtime.com\" , \"pinterest.com\" , \"ebay.com\" , \"thepointsguy.com\" , \"imgur.com\" , \"woot.com\" , \"flyertalk.com\" , \"instagram.com\" , \"medium.com\" , \"meetup.com\" , \"distrowatch.com\" , \"arstechnica.com\" , \"phoronix.com\" , \"arstechnica.com\" , \"failblog.com\" , \"redfin.com\" , \"realtor.com\" , \"zillow.com\" , \"trulia.com\" , \"cnn.com\" , \"fox.com\" , \"realclearpolitics.com\" , \"yelp.com\" , \"opentable.com\" , \"slashdot.org\" , \"xkcd.com\" , \"cnet.com\" , \"tomshardware.com\" , \"engadget.com\" , \"zdnet.com\" , \"techrepublic.com\" , \"gizmag.com\" , \"anandtech.com\" , \"imore.com\" , \"gsmarena.com \" , \"geek.com\" , \"firstpost.com\" , \"wearables.com\" , \"stripgenerator.com\" , \"fmylife.com\" , \"liveplasma.com\" , \"cracked.com\" , \"befunky.com\" , \"pcworld.com\" , \"typepad.com\" , \"pogo.com\" , \"omegle.com\" , \"lifehacker.com\" , \"answerbag.com\" , \"cheezburger.com\" , \"fark.com\" , \"popurls.com\" , \"sho.com\" , \"hulu.com\" , \"myparentsjoinedfacebook.com\" , \"homestarrunner.com\" , \"petsinclothes.com\" , \"freerice.com\" , \"everypoet.com\" , \"mono-1.com\" , \"mcsweeneys.net\" , \"postsecret.com\" , \"textsfromlastnight.com\" , \"awkwardfamilyphotos.com\" , \"myspace.com\" , \"lunchtimers.com\" , \"twitterfall.com\" , \"break.com\" , \"passiveaggressivenotes.com\" , \"sciencemag.org\" , \"bbc.com\" , \"notalwaysright.com\" , } try : CONFIG_DIRS = { \"/etc\" , os . path . expanduser ( \"~\" ), os . path . expanduser ( f \"~ { os . getlogin () } \" )} except OSError : CONFIG_DIRS = { \"/etc\" , os . path . expanduser ( \"~\" )} for distractor_config in ( os . path . join ( config_dir , \"concentration.distractors\" ) for config_dir in CONFIG_DIRS ): if os . path . isfile ( distractor_config ): with open ( distractor_config ) as distractor_config_file : DISTRACTORS . update ( distractor_config_file . read () . splitlines ()) for safe_config in ( os . path . join ( config_dir , \"concentration.safe\" ) for config_dir in CONFIG_DIRS ): if os . path . isfile ( safe_config ): with open ( safe_config ) as safe_config_file : DISTRACTORS . difference_update ( safe_config_file . read () . splitlines () ) # Remove all white listed domains DISTRACTORS . discard ( \"\" ) PLATFORM = OS . linux for platform in (( \"linux\" , OS . linux ), ( \"darwin\" , OS . mac ), ( \"win32\" , OS . windows )): if platform [ 0 ] in sys . platform : PLATFORM = platform [ 1 ] RESTART_NETWORK = { OS . linux : [ [ \"/etc/init.d/networking\" , \"restart\" ], [ \"/etc/init.d/nscd\" , \"restart\" ], [ \"/etc/rc.d/nscd\" , \"restart\" ], [ \"/etc/rc.d/init.d/nscd\" , \"restart\" ], ], OS . mac : [[ \"dscacheutil\" , \"-flushcache\" ]], OS . windows : [[ \"ipconfig\" , \"/flushdns\" ]], }[ PLATFORM ] if PLATFORM is OS . windows : HOSTS_FILE = \"/Windows/System32/drivers/etc/hosts\"","title":"Module concentration.settings"},{"location":"reference/concentration/settings/#variables","text":"CONFIG_DIRS DISTRACTORS END_TOKEN HOSTS_FILE PLATFORM REDIRECT_TO RESTART_NETWORK START_TOKEN SUB_DOMAINS distractor_config platform safe_config","title":"Variables"},{"location":"reference/concentration/settings/#classes","text":"","title":"Classes"},{"location":"reference/concentration/settings/#os","text":"class OS ( / , * args , ** kwargs )","title":"OS"},{"location":"reference/concentration/settings/#ancestors-in-mro","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/concentration/settings/#class-variables","text":"linux mac name value windows","title":"Class variables"}]}